plugins {
    id 'kotlin-multiplatform'
    id 'maven-publish'
    id 'signing'
}

group   = "com.github.netomi.sudoku"
version = "0.2-SNAPSHOT"

repositories {
    mavenCentral()
    jcenter()
}

ext {
    junitVersion  = '5.3.2'
}

kotlin {
    jvm()
    js {
        useCommonJs()
        nodejs {
            testTask {
                useMocha {
                    timeout = '10000'
                }
            }
        }
    }

    targets {
        fromPreset(presets.jvm, 'jvm') {
            configure([compilations.main, compilations.test]) {
                tasks.getByName(compileKotlinTaskName).kotlinOptions {
                    jvmTarget = '1.8'
                }
            }
        }

        fromPreset(presets.js, 'js') {
            configure([compilations.main, compilations.test]) {
                tasks.getByName(compileKotlinTaskName).kotlinOptions {
                    sourceMap = true
                    moduleKind = "umd"
                    metaInfo = true
                }
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit5'

                implementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
                implementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
                implementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

            }
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
    }
}

task copyTestResourcesForJs(type: Copy) {
    from "$projectDir/src/commonTest/resources"
    into "${rootProject.buildDir}/js/packages/${project.name}-test/src/commonTest/resources"
}

jsTest.dependsOn copyTestResourcesForJs

jvmTest {
    useJUnitPlatform()
}

tasks.withType(AbstractTestTask) {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "-" * 80
            println "Test results: ${result.resultType} " +
                    "(" +
                    "${result.testCount} tests, " +
                    "${result.successfulTestCount} successful, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped" +
                    ")"
        }
    }
}

// publishing configuration

def isReleaseVersion  = !version.endsWith("SNAPSHOT")
def SONATYPE_USERNAME = project.hasProperty('sonatypeUsername') ? project.property('sonatypeUsername') : System.getenv('SONATYPE_USERNAME')
def SONATYPE_PASSWORD = project.hasProperty('sonatypePassword') ? project.property('sonatypePassword') : System.getenv('SONATYPE_PASSWORD')

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                description = "Multiplatform sudoku hint solver"
                name = "sudoku-solver"
                url = "https://github.com/netomi/sudoku-solver"
                scm {
                    url = "https://github.com/netomi/sudoku-solver"
                    connection = "scm:git:git://github.com/netomi/sudoku-solver.git"
                    developerConnection = "scm:git:ssh://git@github.com/netomi/sudoku-solver.git"
                }
                licenses {
                    license {
                        name = 'GNU General Public License, Version 2'
                        url = 'https://www.gnu.org/licenses/gpl-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = "netomi"
                        name = "Thomas Neidhart"
                        url = "https://github.com/netomi"
                    }
                }
            }
        }
    }

    repositories {
        def releaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots"

        maven {
            url = isReleaseVersion ? releaseUrl : snapshotUrl

            credentials {
                username = SONATYPE_USERNAME
                password = SONATYPE_PASSWORD
            }
        }
    }
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.maven
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}
