plugins {
    id 'kotlin-multiplatform'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
}

def GROUP_ID = "com.github.netomi.sudoku"
def ARTIFACT_ID = "sudoku-solver"

def BINTRAY_REPOSITORY = "sudoku"
def BINTRAY_ORGANIZATION = "netomi"

def ISSUE_URL = "https://github.com/netomi/sudoku-solver/issues"
def SITE_URL = "https://github.com/netomi/sudoku-solver"
def VCS_URL = "https://github.com/netomi/sudoku-solver.git"
def LIBRARY_VERSION_NAME = "0.2-SNAPSHOT"

group = GROUP_ID
version = LIBRARY_VERSION_NAME
description = 'Sudoku solver library'

ext {
    junitVersion  = '5.3.2'
}

kotlin {
    jvm()
    js {
        useCommonJs()
        nodejs {
            testTask {
                useMocha {
                    timeout = '10000'
                }
            }
        }
    }

    targets {
        fromPreset(presets.jvm, 'jvm') {
            configure([compilations.main, compilations.test]) {
                tasks.getByName(compileKotlinTaskName).kotlinOptions {
                    jvmTarget = '1.8'
                }
            }
        }

        fromPreset(presets.js, 'js') {
            configure([compilations.main, compilations.test]) {
                tasks.getByName(compileKotlinTaskName).kotlinOptions {
                    sourceMap = true
                    moduleKind = "umd"
                    metaInfo = true
                }
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit5'

                implementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
                implementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
                implementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

            }
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
    }
}

task copyTestResourcesForJs(type: Copy) {
    from "$projectDir/src/commonTest/resources"
    into "${rootProject.buildDir}/js/packages/${project.name}-test/src/commonTest/resources"
}

jsTest.dependsOn copyTestResourcesForJs

jvmTest {
    useJUnitPlatform()
}

tasks.withType(AbstractTestTask) {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "-" * 80
            println "Test results: ${result.resultType} " +
                    "(" +
                    "${result.testCount} tests, " +
                    "${result.successfulTestCount} successful, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped" +
                    ")"
        }
    }
}

repositories {
    mavenCentral()
    jcenter()
}

afterEvaluate {
    project.publishing.publications.all {
        // rename artifacts
        groupId = GROUP_ID
        if (it.name.contains('metadata')) {
            artifactId = "$ARTIFACT_ID"
        } else {
            artifactId = "$ARTIFACT_ID-$name"
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key  = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publish = false

    pkg {
        repo = BINTRAY_REPOSITORY
        name = "$GROUP_ID:$ARTIFACT_ID"
        userOrg = BINTRAY_ORGANIZATION
        licenses = ['GPL-2.0']
        vcsUrl = VCS_URL
        websiteUrl = SITE_URL
        issueTrackerUrl = ISSUE_URL

        version {
            name = LIBRARY_VERSION_NAME
            vcsTag = LIBRARY_VERSION_NAME
            released = new Date()
        }
    }
}

bintrayUpload.doFirst {
    publications = publishing.publications.collect {
        it.name
    }.findAll {
        it != "kotlinMultiplatform"
    }
}

bintrayUpload.dependsOn publishToMavenLocal